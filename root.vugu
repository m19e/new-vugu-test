<div class="my-first-vugu-comp" style="height: 100vh;">
    <div class="container-fluid p-4">
        <div class="form-group" style="position: relative;">
            <textarea
                id="text"
                @input="c.HandleChange(event)"
                class="form-control"
                placeholder="Text"
                style="height: 40vh; resize: none;"
            ></textarea>
            <p
                style="
                    position: absolute;
                    right: 3vw;
                    bottom: 1vh;
                    margin: 0;
                    color: gray;
                "
            >
                <span vg-html="c.PureCount"></span>(<span
                    vg-html="c.PlainCount"
                ></span
                >) words
            </p>
        </div>
        <button @click="c.Format()" class="btn btn-primary btn-lg btn-block">
            Format
        </button>
        <div class="form-group my-3">
            <textarea
                id="result"
                vg-html="c.Result"
                class="form-control"
                style="height: 40vh; resize: none;"
                placeholder="Result"
                readonly
            ></textarea>
        </div>
        <button
            type="button"
            @click="c.Copy()"
            class="btn btn-primary btn-lg btn-block"
        >
            Copy
        </button>
    </div>

    <link
        rel="stylesheet"
        href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
        integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T"
        crossorigin="anonymous"
    />
</div>

<style>
    .my-first-vugu-comp {
        background: #eee;
    }
</style>

<script type="application/x-go">
    import (
        "regexp"
        "strings"
    )

    type Root struct {
        Text string `vugu:"data"`
        Result string `vugu:"data"`
        PlainCount int `vugu:"data"`
        PureCount int `vugu:"data"`
    }

    const checkList = "　「『#"

    func (c *Root) HandleChange(event *vugu.DOMEvent) {
        c.Text = event.JSEvent().Get("target").Get("value").String()
        c.PlainCount = wc(c.Text)
        c.PureCount = wc(trim(c.Text))
    }

    func (c *Root) Copy() {
        js.Global().Get("document").Call("getElementById", "result").Call("select")
        js.Global().Get("document").Call("execCommand", "Copy")
        js.Global().Get("window").Call("getSelection").Call("removeAllRanges")
    }

    func wc(s string) int {
        return len([]rune(s))
    }

    func trim(s string) string {
        return strings.NewReplacer(
            "\r\n", "",
            "\r", "",
            "\n", "",
            "\t", "",
            "　", "",
            " ", "",
        ).Replace(s)
    }

    func widen(s string) string {
        return strings.NewReplacer(
            "!", "！",
            "?", "？",
            " ", "　",
        ).Replace(s)
    }

    func checkBOL(s string) bool {
        if s == "" { return false }
        if strings.Contains(checkList, string([]rune(s)[:1])) { return false }
        return true
    }

    func (c *Root) Format() {
        var result string
        r := regexp.MustCompile(`([？！])([^　？！」』])`)
        txt := widen(c.Text)
        txt = r.ReplaceAllString(txt, "${1}　${2}")
        slice := strings.Split(txt, "\n")
        for _, str := range slice {
            if checkBOL(str) { str = "　" + str }
            result += str + "\n"
        }
        c.Result = result
    }
</script>
